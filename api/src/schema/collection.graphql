input CollectionProps {
  id: ID
  sourceId: ID
  classId: ID
  title: String
  icon: String
  type: String
  description: String
  remove: Boolean
}

type CollectionOps {
  post_container_of_collection(input: CollectionProps!): Collection!
  post_instance_of_concept(input: CollectionProps!): Collection!
  post_timeline_of_event(input: CollectionProps!): Collection!
  post_subject_of_idea(input: CollectionProps!): Collection!
  post_container_of_item(input: CollectionProps!): Collection!
  post_at_location(input: CollectionProps!): Collection!
  post_for_person(input: CollectionProps!): Collection!
  post_in_space(input: CollectionProps!): Collection!
}

extend type Mutation {
  Collection: CollectionOps
}

extend type Query {
  Collection(id: ID!): Collection
}

type Collection {
  id: ID!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  type: String
  description: String

  collections(first: Int = 10, offset: Int = 0): [Collection!] @relation(name: "CONTAINS", direction: "OUT")
  class: Concept @relation(name: "INSTANCE_OF", direction: "OUT")
  timeline(first: Int = 10, offset: Int = 0): [Event!] @relation(name: "TIMELINE", direction: "OUT")
  subject_ideas(first: Int = 10, offset: Int = 0): [Idea!] @relation(name: "SUBJECT", direction: "IN")
  items(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "CONTAINS", direction: "OUT")
  location: Location! @relation(name: "AT", direction: "OUT")
  owners(first: Int = 10, offset: Int = 0): [Person!] @relation(name: "HAS", direction: "IN")
  spaces(first: Int = 10, offset: Int = 0): [Space!] @relation(name: "CONTAINS", direction: "IN")
}