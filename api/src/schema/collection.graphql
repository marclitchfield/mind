input CollectionProps {
  title: String!
  icon: String
  type: String
  description: String
}

type CollectionOps {
  createInSpace(id: ID = null, spaceId: ID!, classConceptId: ID!, input: CollectionProps!): Collection!
  createInstance(id: ID = null, classConceptId: ID!, input: CollectionProps!): Collection!
  createForPerson(id: ID = null, personId: ID!, classConceptId: ID!, input: CollectionProps!): Collection!
  addEvent(id: ID!, eventId: ID!): Boolean
  setClass(id: ID!, classConceptId: ID!): Boolean
  setLocation(id: ID!, locationId: ID!): Boolean
  removeEvent(id: ID!, eventId: ID!): Boolean
  clearLocation(id: ID!): Boolean
}

extend type Mutation {
  Collection: CollectionOps
}

extend type Query {
  Collection(id: ID!): Collection
}

type Collection implements Entity {
  id: ID!
  spaces: [Space!] @relation(name: "CONTAINS", direction: "IN")
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  type: String
  description: String
  location: Location @relation(name: "AT", direction: "OUT")
  class: Concept @relation(name: "INSTANCE_OF", direction: "OUT")
  items: [Item!] @relation(name: "CONTAINS", direction: "OUT")
  timeline: [Event!] @relation(name: "TIMELINE", direction: "OUT")
}