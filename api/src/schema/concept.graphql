input ConceptProps {
  id: ID
  sourceId: ID
  title: String
  body: String
  icon: String
  remove: Boolean
}

type ConceptOps {
  post_class_of_collection(input: ConceptProps!): Concept!
  post_super_concept(input: ConceptProps!): Concept!
  post_sub_concept(input: ConceptProps!): Concept!
  post_description_of_event(input: ConceptProps!): Concept!
  post_description_of_idea(input: ConceptProps!): Concept!
  post_class_of_item(input: ConceptProps!): Concept!
  post_description_of_location(input: ConceptProps!): Concept!
  post_description_of_person(input: ConceptProps!): Concept!
  post_in_space(input: ConceptProps!): Concept!
}

extend type Mutation {
  Concept: ConceptOps
}

extend type Query {
  Concept(id: ID!): Concept
}

type Concept implements Entity {
  id: ID!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  body: String

  collection_instances(first: Int = 10, offset: Int = 0): [Collection!] @relation(name: "INSTANCE_OF", direction: "IN")
  sub_concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "SUB", direction: "OUT")
  super_concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "SUB", direction: "IN")
  described_events(first: Int = 10, offset: Int = 0): [Event!] @relation(name: "DESCRIBED_BY", direction: "IN")
  described_ideas(first: Int = 10, offset: Int = 0): [Idea!] @relation(name: "DESCRIBED_BY", direction: "IN")
  item_instances(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "INSTANCE_OF", direction: "IN")
  described_locations(first: Int = 10, offset: Int = 0): [Location!] @relation(name: "DESCRIBED_BY", direction: "IN")
  described_people(first: Int = 10, offset: Int = 0): [Person!] @relation(name: "DESCRIBED_BY", direction: "IN")
  spaces(first: Int = 10, offset: Int = 0): [Space!] @relation(name: "CONTAINS", direction: "IN")
}