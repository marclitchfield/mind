input PersonProps {
  id: ID
  sourceId: ID
  name: String
  icon: String
  title: String
  born_at: String
  died_at: String
  remove: Boolean
}

type PersonOps {
  post_having_collection(input: PersonProps!): Person!
  post_described_by_concept(input: PersonProps!): Person!
  post_timeline_of_event(input: PersonProps!): Person!
  post_source_of_idea(input: PersonProps!): Person!
  post_subject_of_idea(input: PersonProps!): Person!
  post_having_item(input: PersonProps!): Person!
  post_at_location(input: PersonProps!): Person!
  post_in_space(input: PersonProps!): Person!
}

extend type Mutation {
  Person: PersonOps
}

extend type Query {
  Person(id: ID!): Person
}

type Person {
  id: ID!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  name: String

  abilities(first: Int = 10, offset: Int = 0): [Ability!] @relation(name: "HAS", direction: "OUT")
  ability_activities(first: Int = 10, offset: Int = 0): [AbilityActivity!] @relation(name: "PERFORMED", direction: "OUT")
  collections(first: Int = 10, offset: Int = 0): [Collection!] @relation(name: "HAS", direction: "OUT")
  concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "DESCRIBED_BY", direction: "OUT")
  timeline(first: Int = 10, offset: Int = 0): [Event!] @relation(name: "TIMELINE", direction: "OUT")
  source_ideas(first: Int = 10, offset: Int = 0): [Idea!] @relation(name: "SOURCE_OF", direction: "OUT")
  subject_ideas(first: Int = 10, offset: Int = 0): [Idea!] @relation(name: "SUBJECT", direction: "IN")
  items(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "HAS", direction: "OUT")
  location: Location @relation(name: "AT", direction: "OUT")
  spaces(first: Int = 10, offset: Int = 0): [Space!] @relation(name: "CONTAINS", direction: "IN")

  offspring: [Offspring!] @relation(name: "PARENT_OF", direction: "OUT")
  parents: [Person!] @cypher(statement: "MATCH (this)<-[:CHILD]-(o:Offspring)<-[:PARENT_OF]-(p:Person) RETURN p")
  children: [Person!] @cypher(statement: "MATCH (this)-[:PARENT_OF]->(o:Offspring)-[:CHILD]->(p:Person) RETURN p")
  connections: [Connection!] @relation(name: "PART_OF", direction: "OUT")
}