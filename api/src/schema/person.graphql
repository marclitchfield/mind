input PersonProps {
  title: String!
  icon: String
  name: String
  born_at: String
  died_at: String
}

type PersonOps {
  post(id: ID = null, sourceId: ID = null, input: EventProps!): Event!
  add(id: ID!, targetId: ID!): Boolean
  remove(id: ID!, targetId: ID!): Boolean
  createOffspring(parent1: ID!, parent2: ID!, childId: ID!, eventId: ID!): Boolean
  createUnion(person1: ID!, person2: ID!, eventId: ID!): Boolean
}

extend type Mutation {
  Person: PersonOps
}

extend type Query {
  Person(id: ID!): Person
}

type Person implements Entity {
  id: ID!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  name: String

  collections(first: Int = 10, offset: Int = 0): [Collection!] @relation(name: "HAS", direction: "OUT")
  concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "DESCRIBED_BY", direction: "OUT")
  timeline(first: Int = 10, offset: Int = 0): [Event!] @relation(name: "TIMELINE", direction: "OUT")
  ideas(first: Int = 10, offset: Int = 0): [Idea!] @relation(name: "SUBJECT", direction: "IN")
  items(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "HAS", direction: "OUT")
  location: Location @relation(name: "AT", direction: "OUT")
  spaces: [Space!] @relation(name: "CONTAINS", direction: "IN")

  offspring: [Offspring!] @relation(name: "PARENT_OF", direction: "OUT")
  parents: [Person!] @cypher(statement: "MATCH (this)<-[:CHILD]-(o:Offspring)<-[:PARENT_OF]-(p:Person) RETURN p")
  children: [Person!] @cypher(statement: "MATCH (this)-[:PARENT_OF]->(o:Offspring)-[:CHILD]->(p:Person) RETURN p")
  unions: [Union!] @relation(name: "PART_OF", direction: "OUT")
}

type Offspring {
  parents: [Person!]! @relation(name: "PARENT", direction: "IN")
  child: Person! @relation(name: "CHILD", direction: "OUT")
  event: Event! @relation(name: "BIRTH", direction: "OUT")
}

type Union {
  participants: [Person!]! @relation(name: "PART_OF", direction: "IN")
  event: Event! @relation(name: "UNION", direction: "OUT")
}