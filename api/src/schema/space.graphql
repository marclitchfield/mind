input SpaceProps {
  title: String!
}

type SpaceOps {
  createInMind(id: ID = null, mindId: ID!, input: SpaceProps!): Space!

  addCollection(id: ID!, collectionId: ID!): Boolean
  addConcept(id: ID!, conceptId: ID!): Boolean
  addEvent(id: ID!, eventId: ID!): Boolean
  addIdea(id: ID!, ideaId: ID!): Boolean
  addItem(id: ID!, itemId: ID!): Boolean
  addLocation(id: ID!, locationId: ID!): Boolean
  addPerson(id: ID!, personId: ID!): Boolean

  removeCollection(id: ID!, collectionId: ID!): Boolean
  removeConcept(id: ID!, conceptId: ID!): Boolean
  removeEvent(id: ID!, eventId: ID!): Boolean
  removeIdea(id: ID!, ideaId: ID!): Boolean
  removeItem(id: ID!, itemId: ID!): Boolean
  removeLocation(id: ID!, locationId: ID!): Boolean
  removePerson(id: ID!, personId: ID!): Boolean
}

extend type Mutation {
  Space: SpaceOps
}

extend type Query {
  Space(id: ID!): Space
}

type Space {
  id: ID!
  minds: [Mind] @relation(name: "CONTAINS", direction: "IN")
  title: String!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  rootConcepts(first: Int = 10, offset: Int = 0): [Concept!] @cypher(statement: "MATCH (this)-[:CONTAINS {root:true}]->(c:Concept) RETURN c")
  concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "CONTAINS", direction: "OUT")
  rootIdeas(first: Int = 10, offset: Int = 0): [Idea!] @cypher(statement: "MATCH (this)-[:CONTAINS]->(i:Idea) WHERE NOT (i)<-[:RESPONSE]-(:Idea) RETURN i")
  ideas(first: Int = 10, offset: Int = 0): [Idea!] @relation(name: "CONTAINS", direction: "OUT")
  people(first: Int = 10, offset: Int = 0): [Person!] @relation(name: "CONTAINS", direction: "OUT")
  items(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "CONTAINS", direction: "OUT")
  events(first: Int = 10, offset: Int = 0): [Event!] @relation(name: "CONTAINS", direction: "OUT")
  locations(first: Int = 10, offset: Int = 0): [Location!] @relation(name: "CONTAINS", direction: "OUT")
}
