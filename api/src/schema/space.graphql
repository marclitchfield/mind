input SpaceProps {
  id: ID
  sourceId: ID
  title: String!
  remove: Boolean
}

type SpaceOps {
  post_in_mind(input: SpaceProps!): Space!
  post_super_space(input: SpaceProps!): Space!
  post_sub_space(input: SpaceProps!): Space!
  destroy(id: ID!): Boolean
}

extend type Mutation {
  Space: SpaceOps
}

extend type Query {
  Space(id: ID!): Space
}

type Space {
  id: ID!
  minds: [Mind] @relation(name: "CONTAINS", direction: "IN")
  title: String!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  sub_spaces(first: Int = 10, offset: Int = 0): [Space!] @relation(name: "CONTAINS", direction: "OUT")
  super_spaces(first: Int = 10, offset: Int = 0): [Space!] @relation(name: "CONTAINS", direction: "IN")
  root_concepts(first: Int = 10, offset: Int = 0): [Concept!] @cypher(statement: "MATCH (this)-[:CONTAINS {root:true}]->(c:Concept) RETURN c")
  concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "CONTAINS", direction: "OUT")
  root_deas(first: Int = 10, offset: Int = 0): [Idea!] @cypher(statement: "MATCH (this)-[:CONTAINS]->(i:Idea) WHERE NOT (i)<-[:RESPONSE]-(:Idea) RETURN i")
  ideas(first: Int = 10, offset: Int = 0): [Idea!] @relation(name: "CONTAINS", direction: "OUT")
  people(first: Int = 10, offset: Int = 0): [Person!] @relation(name: "CONTAINS", direction: "OUT")
  collections(first: Int = 10, offset: Int = 0): [Collection!] @relation(name: "CONTAINS", direction: "OUT")
  items(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "CONTAINS", direction: "OUT")
  events(first: Int = 10, offset: Int = 0): [Event!] @relation(name: "CONTAINS", direction: "OUT")
  locations(first: Int = 10, offset: Int = 0): [Location!] @relation(name: "CONTAINS", direction: "OUT")
}
