input EventProps {
  title: String!
  body: String
  icon: String
  datetime: String!
  type: String
}

type EventOps {
  createInSpace(id: ID = null, spaceId: ID!, input: EventProps!): Event!
  createForConcept(id: ID = null, conceptId: ID!, input: EventProps!): Event!
  createAtLocation(id: ID = null, locationId: ID!, input: EventProps!): Event!
  createForCollection(id: ID = null, collectionId: ID!, input: EventProps!): Event!
  createForItem(id: ID = null, itemId: ID!, input: EventProps!): Event!
  createForIdea(id: ID = null, ideaId: ID!, input: EventProps!): Event!
  createForPerson(id: ID = null, personId: ID!, input: EventProps!): Event!
  addLocation(id: ID!, locationId: ID!): Boolean
  addConcept(id: ID!, conceptId: ID!): Boolean
  removeLocation(id: ID!, locationId: ID!): Boolean
  removeConcept(id: ID!, conceptId: ID!): Boolean
}

extend type Mutation {
  Event: EventOps
}

extend type Query {
  Event(id: ID!): Event
}

type Event implements Entity {
  id: ID!
  spaces: [Space!] @relation(name: "CONTAINS", direciton: "IN")
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  body: String
  type: String
  datetime: String! @cypher(statement: "RETURN apoc.date.format(this.datetime)")
  concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "CONTAINS", direction: "OUT")
  people(first: Int = 10, offset: Int = 0): [Person!] @relation(name: "TIMELINE", direction: "IN")
  items(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "TIMELINE", direction: "IN")
  ideas(first: Int = 10, offset: Int = 0): [Item!] @relation(name: "CONTAINS", direction: "IN")
  locations(first: Int = 10, offset: Int = 0): [Location!] @relation(name: "AT", direction: "IN")
}
