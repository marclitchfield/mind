type Query {
  allMinds: [Mind]

  Mind(id: ID!): Mind
  Space(id: ID!): Space
  Concept(id: ID!): Concept
  Position(id: ID!): Position
  Event(id: ID!): Event
}

type Mutation {
  createMind(id: ID = null): Mind!
  createSpace(id: ID = null, mindId: ID!, name: String!): Space!
  createSpaceConcept(id: ID = null, spaceId: ID!, title: String!, body: String = null, icon: String = null): Concept!
  createSubConcept(id: ID = null, superConceptId: ID!, title: String!, body: String = null, icon: String = null): Concept!
  addSubConcept(superConceptId: ID!, subConceptId: ID!): Boolean
  removeSubConcept(superConceptId: ID!, subConceptId: ID!): Boolean
  createConceptPosition(id: ID = null, conceptId: ID!, title: String!, body: String = null, icon: String = null, type: String = null): Position!
  createResponsePosition(id: ID = null, contextPositionId: ID!, title: String!, body: String = null, icon: String = null, type: String = null): Position!
  addResponsePosition(contextPositionId: ID!, responsePositionId: ID!): Boolean
  removeResponsePosition(contextPositionId: ID!, responsePositionId: ID!): Boolean
  createSpaceEvent(id: ID = null, spaceId: ID!, title: String!, body: String = null, icon: String = null, datetime: String!, type: String = null): Event!
  createConceptEvent(id: ID = null, conceptId: ID!, title: String!, body: String = null, icon: String = null, datetime: String!, type: String = null): Event!
}

type Mind {
  id: ID!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  spaces: [Space]! @relation(name: "CONTAINS", direction: "OUT")
}

type Space {
  id: ID!
  minds: [Mind] @relation(name: "CONTAINS", direction: "IN")
  name: String!
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  rootConcepts(first: Int = 10, offset: Int = 0): [Concept!]! @cypher(statement: "MATCH (this)-[:CONTAINS {root:true}]->(c:Concept) RETURN c")
}

type Concept {
  id: ID!
  spaces: [Space] @relation(name: "CONTAINS", direction: "IN")
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  body: String
  subConcepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "SUB", direction: "OUT")
  superConcepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "SUB", direction: "IN")
  positions(first: Int = 10, offset: Int = 0): [Position!] @relation(name: "CONTAINS", direction: "IN")
  # people(first: Int = 10, offset: Int = 0): [Person!]! @relation(name: "CLASS_OF", direction: "IN")
  # items(first: Int = 10, offset: Int = 0): [Item!]! @relation(name: "CLASS_OF", direction: "IN")
  timeline(first: Int = 10, offset: Int = 0): [Event!] @relation(name: "TIMELINE", direction: "OUT")
}

# interface Entity {
#   id: ID!
#   spaces: [Space!]! @relation(name: "CONTAINS", direction: "IN")
#   created: Int!
#   title: String!
#   icon: String
# }

type Position {
  id: ID!
  spaces: [Space!]! @relation(name: "CONTAINS", direciton: "IN")
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  type: String!
  concepts(first: Int = 10, offset: Int = 0): [Concept!] @relation(name: "CONTAINS", direciton: "OUT")
  contexts(first: Int = 10, offset: Int = 0): [Position!] @relation(name: "RESPONSE", direction: "IN")
  responses(first: Int = 10, offset: Int = 0): [Position!] @relation(name: "RESPONSE", direction: "OUT")
  # confidence(mindId: ID!): Float
  # people(first: Int = 10, offset: Int = 0): [Person!]! @relation(name: "SUBJECT", direction: "OUT")
  # items(first: Int = 10, offset: Int = 0): [Item!]! @relation(name: "SUBJECT", direction: "OUT")
}

# type Person implements Entity {
#   id: ID!
#   spaces: [Space!]! @relation(name: "CONTAINS", direciton: "IN")
#   created: Int!
#   title: String!
#   icon: String
#   offspring: [Offspring!]! @relation(name: "PARENT", direction: "OUT")
#   unions: [Union!]! @relation(name: "UNION", direction: "OUT")
#   timeline(first: Int = 10, offset: Int = 0): [Event!]! @relation(name: "TIMELINE", direction: "OUT")
# }

# type Offspring {
#   parents: [Person!]! @relation(name: "PARENT", direction: "IN")
#   child: Person! @relation(name: "CHILD", direction: "OUT")
#   event: Event
# }

# type Union {
#   participants: [Person!]! @relation(name: "UNION", direction: "IN")
#   event: Event
# }

# type Item implements Entity {
#   id: ID!
#   spaces: [Space!]! @relation(name: "CONTAINS", direciton: "IN")
#   created: Int!
#   title: String!
#   icon: String
#   subType: String!
#   components(first: Int = 10, offset: Int = 0): [Item!]! @relation(name: "COMPONENT", direction: "OUT")
#   containers(first: Int = 10, offset: Int = 0): [Item!]! @relation(name: "COMPONENT", direction: "IN")
#   classes: [Concept!]! @relation(name: "CLASS_OF", direction: "OUT")
#   timeline(first: Int = 10, offset: Int = 0): [Event!]! @relation(name: "TIMELINE", direction: "OUT")
# }

type Event {
  id: ID!
  spaces: [Space!]! @relation(name: "CONTAINS", direciton: "IN")
  created: String! @cypher(statement: "RETURN apoc.date.format(this.created)")
  title: String!
  icon: String
  body: String
  type: String
  datetime: String! @cypher(statement: "RETURN apoc.date.format(this.datetime)")
  # people(first: Int = 10, offset: Int = 0): [Person!]! @relation(name: "TIMELINE", direction: "IN")
  # items(first: Int = 10, offset: Int = 0): [Item!]! @relation(name: "TIMELINE", direction: "IN")
  concepts(first: Int = 10, offset: Int = 0): [Concept!]! @relation(name: "TIMELINE", direction: "IN")
}